Bitwise Operators
=================

Operator    Descriptions
--------    ------------
    &       Bitwise AND
    |       Bitwise OR
    ^       Bitwise XOR
    ~       Bitwise complement
    <<      Shift Left
    >>      Shift Right

Bitwise vs Logical Operators
============================

* Logical :  boolean operation on whole number
* Bitwise :  boolean operation on each raw bit

Logical   Bitwise   Boolean
-------   -------   -------
  &&         &        AND
  ||         |        OR
  !          ~        NOT

Bitwise AND
===========

x   y   x AND y             C = A & B
-   -   -------
0   0      0                A   10101010
1   0      0                &
0   1      0                B   00001111
1   1      1                =   --------
                                00001010

Bitwise OR
==========

x   y   x OR y              C = A | B
-   -   ------
0   0      0                A   10101010
1   0      1                |
0   1      1                B   00001111
1   1      1                =   --------
                                10101111

Bitwise XOR
===========

x   y   x XOR y              C = A ^ B
-   -   -------
0   0      0                 A   10101010
1   0      1                 ^
0   1      1                 B   00001111
1   1      0                 =   --------
                                 10100101

Bitwise NOT
===========

x    NOT x              B = ~A
-    ------
0      1                A   10101010
1      0                ~
                        =   --------
                            01010101

Shift Right
===========

B = A >> N    Operand A is shifted right by N bits

e.g. A >> 3     A   11001100
                >>  01100110
                >>  00110011
        B =     >>  00011001

Shift Left
==========

B = A << N    Operand A is shifted left by N bits

e.g. A << 3     A   11001100
                <<  10011000
                <<  00110000
        B =     <<  01100000

Shifted Values
==============

A << N --> A x 2^N                  A >> N --> A/2^N
1 << 0 --> 1 (A)                    8 >> 0 --> 8 (A)
1 << 1 --> 2 (A * 2)                8 >> 1 --> 4 (A/2)
1 << 2 --> 4 (A * 2 * 2)            8 >> 2 --> 2 (A/2/2)
1 << 3 --> 8 (A * 2 * 2 * 2)        8 >> 3 --> 1 (A/2/2/2)
