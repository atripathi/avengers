Integer promotion
=================

Integer Promotion
       |
       v
int -> unsigned int -> long int -> unsigned long int -> long long int
                                                              |
                                                              v
              long double <- double <- float <- unsigned long long int

Arithmetic Conversion
=====================

#include <stdio.h>

int main()
{
  int a = 1;
  long int b =2;
  double c = 3.3;

  b = b + a; // implicit conversion: a is promoted to long int
  c = c * b; // implicit conversion: b is promoted to double
  return 0;
}

Relational Operators
====================

A = 6, B = 2

Operator    Description                 Example
--------    -----------                 -------
    ==      Equal to                    A == B -> 0
    !=      Not equal to                A != B -> 1
    >       Greater than                A > B  -> 1
    <       Less than                   A < B  -> 0
    >=      Greater than or equal to    A >= B -> 1
    <=      Less than or equal to       A <= B -> 0

Logical Operators
=================

Operator    Boolean Algebra     Type
--------    ---------------     ----
   &&             AND           binary
   ||             OR            binary
   !              NOT           unary

Bitmasks
========

Operator    Bitmask         Description
--------    -------         -----------
    &       Bit Clearing    Mask is 0 -> result is 0
    &       Bit Testing     Mask is 1 -> input pass
    |       Bit Setting     Mask is 1 -> result is 1
    ^       Bit Toggling    Mask is 1 -> input toggle

sizeof(something) ==> size of something in bytes

(type) expression ==> convert expression data type to type

Operators Precedence
====================

Precedence table from bottom to top.

Category            Operator                            Associativity
--------            --------                            -------------
Postfix             () [] -> . ++ --                    Left to right
Unary               + - ! ~ ++ -- (type) & * sizeof     Right to left
Multiplicative      * / %                               Left to right
Additive            + -                                 Left to right
Shift               << >>                               Left to right
Relational          < <= > >=                           Left to right
Equality            == !=                               Left to right
Bitwise AND         &                                   Left to right
Bitwise XOR         ^                                   Left to right
Biwise OR           |                                   Left to right
Logical AND         &&                                  Left to right
Logical OR          ||                                  Left to right
Conditional         ?:                                  Right to left
Assignment          = += -= *= /= %=>>= <<= &= ^= |=    Right to left
Comma               ,                                   Left to right

int result = 12 + 34 / 2 ;
                  ------
                     |
              evaluated first

int result =  a > b &&   b != 123;
           -  ----- ---  --------
           |    |    |      |
           4    1    3      2
